name: Terraform Infrastructure Management

on:
  pull_request:
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform.yml'
  push:
    branches: [main]
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.13.1'
  AWS_REGION: ${{ vars.AWS_REGION }}
  TERRAFORM_DIR: 'infra/terraform'
  
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-validate-and-plan:
    name: Terraform Validation & Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        
      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Security Scan (tfsec)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ env.TERRAFORM_DIR }}
          soft_fail: true

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color 2>&1 | tee plan.txt


      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('${{ env.TERRAFORM_DIR }}/plan.txt', 'utf8');
            
            // Extract summary information only
            const lines = planOutput.split('\n');
            const planSummary = lines.filter(line => 
              line.includes('Plan:') || 
              line.includes('Error:') || 
              line.includes('Warning:') ||
              line.includes('Changes to Outputs:')
            ).join('\n');
            
            const comment = `## Terraform Plan Summary
            
            ${planSummary || 'No changes detected'}
            
            **Plan Status:** ${{ steps.plan.outcome == 'success' && 'Success' || 'Failed' }}
            **Commit:** ${{ github.sha }}
            **Full Details:** [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Summary')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate-and-plan
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init


      - name: Terraform Apply
        id: apply
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            case "${{ github.event.inputs.action }}" in
              "plan")
                terraform plan -no-color
                ;;
              "apply")
                terraform apply -auto-approve -no-color
                ;;
              "destroy")
                terraform plan -destroy -no-color -out=destroy.tfplan
                echo "Destroy plan created. Manual approval required for actual destruction."
                ;;
            esac
          else
            # Push to main branch - generate fresh plan and apply
            terraform apply -auto-approve -no-color
          fi

      - name: Terraform Output
        id: output
        if: steps.apply.outcome == 'success'
        run: terraform output -json > terraform-outputs.json

      - name: Upload Terraform Outputs
        if: steps.apply.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ env.TERRAFORM_DIR }}/terraform-outputs.json
          retention-days: 30

  terraform-destroy-on-failure:
    name: Destroy on Failure
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: needs.terraform-apply.result == 'failure'
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -no-color

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [terraform-apply, terraform-destroy-on-failure]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.terraform-apply.result }}" == "success" ]]; then
            echo "Terraform deployment completed successfully!"
            echo "Infrastructure changes have been applied to AWS."
          elif [[ "${{ needs.terraform-destroy-on-failure.result }}" == "success" ]]; then
            echo "Terraform apply failed, but destroy completed successfully!"
            echo "Infrastructure has been cleaned up."
          else
            echo "Terraform deployment failed!"
            echo "Please check the logs and fix any issues."
          fi
