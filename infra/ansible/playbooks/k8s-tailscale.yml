---
# K8s Control Plane Tailscale 클라이언트 설정 플레이북

- name: Setup Tailscale on K8s Control Plane
  hosts: k8s_control_plane
  become: true
  gather_facts: true
  
  vars:
    tailscale_version: "1.76.1"
    tailscale_state_dir: /var/lib/tailscale
    
  tasks:
    # Tailscale 설치
    - name: Add Tailscale GPG key
      apt_key:
        url: https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg
        state: present
        keyring: /usr/share/keyrings/tailscale-archive-keyring.gpg
        
    - name: Add Tailscale repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/tailscale-archive-keyring.gpg] https://pkgs.tailscale.com/stable/ubuntu jammy main"
        state: present
        filename: tailscale
        
    - name: Install Tailscale
      apt:
        name: tailscale
        state: present
        update_cache: yes
        
    - name: Enable IP forwarding for Kubernetes
      sysctl:
        name: "{{ item }}"
        value: '1'
        state: present
        reload: yes
      loop:
        - net.ipv4.ip_forward
        - net.ipv6.conf.all.forwarding
        
    - name: Start and enable tailscaled
      systemd:
        name: tailscaled
        state: started
        enabled: yes
        
    - name: Check tailscale status
      command: tailscale status --json
      register: tailscale_status
      failed_when: false
      changed_when: false
      
    - name: Parse tailscale status
      set_fact:
        tailscale_data: "{{ tailscale_status.stdout | from_json }}"
      when: tailscale_status.rc == 0
      
    - name: Check if tailscale is already connected
      set_fact:
        tailscale_connected: "{{ tailscale_data is defined and tailscale_data.BackendState == 'Running' }}"
      when: tailscale_status.rc == 0
      
    - name: Set tailscale as disconnected if status check failed
      set_fact:
        tailscale_connected: false
      when: tailscale_status.rc != 0
      
    # K8s 서비스 서브넷과 파드 서브넷을 advertise
    - name: Connect to headscale server with K8s subnets
      command: >
        tailscale up 
        --login-server={{ headscale_server_url }} 
        --authkey={{ headscale_preauth_key }}
        --accept-routes
        --advertise-routes={{ k8s_pod_subnet }},{{ k8s_service_subnet }},{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask | ipaddr('prefix') }}
        --hostname={{ inventory_hostname }}-k8s-cp
      when: not tailscale_connected and headscale_preauth_key is defined
      register: tailscale_connect
      vars:
        k8s_pod_subnet: "10.244.0.0/16"
        k8s_service_subnet: "10.96.0.0/12"
        
    - name: Display connection instructions if no pre-auth key
      debug:
        msg: |
          📋 Tailscale 설정이 완료되었습니다!
          
          수동으로 연결하려면 다음 명령어를 실행하세요:
          sudo tailscale up --login-server={{ headscale_server_url }} --accept-routes \
            --advertise-routes={{ k8s_pod_subnet }},{{ k8s_service_subnet }},{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask | ipaddr('prefix') }} \
            --hostname={{ inventory_hostname }}-k8s-cp
          
          그 다음 headscale 서버에서 다음 명령어로 노드와 라우트를 승인하세요:
          headscale nodes list
          headscale routes list
          headscale routes enable -r <route-id>
      when: not tailscale_connected and headscale_preauth_key is not defined
      vars:
        k8s_pod_subnet: "10.244.0.0/16"
        k8s_service_subnet: "10.96.0.0/12"
        
    - name: Get tailscale status after connection
      command: tailscale status
      register: final_tailscale_status
      when: tailscale_connected or (tailscale_connect is defined and tailscale_connect.rc == 0)
      
    - name: Display tailscale network information
      debug:
        msg: |
          🔗 K8s Control Plane Tailscale 연결 완료!
          
          {{ final_tailscale_status.stdout }}
          
          네트워크 정보:
          - 호스트 서브넷: {{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask | ipaddr('prefix') }}
          - K8s Pod 서브넷: {{ k8s_pod_subnet }}
          - K8s Service 서브넷: {{ k8s_service_subnet }}
          - Headscale 서버: {{ headscale_server_url }}
      when: final_tailscale_status is defined
      vars:
        k8s_pod_subnet: "10.244.0.0/16"
        k8s_service_subnet: "10.96.0.0/12"
        
    # K8s 초기화 스크립트 생성 (Tailscale IP 사용)
    - name: Get Tailscale IP address
      shell: tailscale ip -4
      register: tailscale_ip
      when: tailscale_connected or (tailscale_connect is defined and tailscale_connect.rc == 0)
      
    - name: Create Kubernetes initialization script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          
          TAILSCALE_IP="{{ tailscale_ip.stdout | default('') }}"
          
          if [ -z "$TAILSCALE_IP" ]; then
              echo "ERROR: Tailscale IP not found. Make sure Tailscale is connected."
              exit 1
          fi
          
          echo "🚀 Initializing Kubernetes with Tailscale IP: $TAILSCALE_IP"
          
          # kubeadm 초기화
          kubeadm init \
              --apiserver-advertise-address="$TAILSCALE_IP" \
              --apiserver-cert-extra-sans="$TAILSCALE_IP" \
              --pod-network-cidr=10.244.0.0/16 \
              --service-cidr=10.96.0.0/12 \
              --cri-socket=unix:///var/run/crio/crio.sock \
              --control-plane-endpoint="$TAILSCALE_IP:6443"
          
          # kubeconfig 설정
          mkdir -p /root/.kube
          cp -i /etc/kubernetes/admin.conf /root/.kube/config
          chown root:root /root/.kube/config
          
          mkdir -p /home/ubuntu/.kube
          cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
          chown ubuntu:ubuntu /home/ubuntu/.kube/config
          
          # Flannel CNI 설치
          kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
          
          echo "✅ Kubernetes Control Plane initialized successfully!"
          echo "📋 Join command for worker nodes:"
          kubeadm token create --print-join-command
          
          echo ""
          echo "🔗 Kubernetes API Server는 Tailscale 네트워크를 통해 접근 가능합니다:"
          echo "   kubectl cluster-info"
        dest: /opt/init-k8s-tailscale.sh
        mode: '0755'
        owner: root
        group: root
      when: tailscale_ip is defined and tailscale_ip.stdout != ""
      
    - name: Create Kubernetes cluster access helper script
      copy:
        content: |
          #!/usr/bin/env bash
          # Kubernetes 클러스터 접근 도구
          
          set -euo pipefail
          
          TAILSCALE_IP="{{ tailscale_ip.stdout | default('') }}"
          KUBECONFIG_LOCAL="/tmp/k8s-{{ inventory_hostname }}-config"
          
          case "${1:-help}" in
            "init")
              echo "🚀 Kubernetes 클러스터 초기화 중..."
              /opt/init-k8s-tailscale.sh
              ;;
            "status")
              echo "📊 클러스터 상태:"
              kubectl cluster-info
              echo ""
              kubectl get nodes -o wide
              ;;
            "join-cmd")
              echo "📋 Worker 노드 조인 명령어:"
              kubeadm token create --print-join-command
              ;;
            "export-config")
              if [ -f /etc/kubernetes/admin.conf ]; then
                  echo "📤 Kubeconfig 내보내는 중..."
                  sed "s/https:\/\/.*:6443/https:\/\/$TAILSCALE_IP:6443/g" /etc/kubernetes/admin.conf > "$KUBECONFIG_LOCAL"
                  echo "✅ Kubeconfig 저장됨: $KUBECONFIG_LOCAL"
                  echo ""
                  echo "로컬에서 사용하려면:"
                  echo "  export KUBECONFIG=$KUBECONFIG_LOCAL"
                  echo "  kubectl get nodes"
              else
                  echo "❌ Kubernetes가 아직 초기화되지 않았습니다."
                  exit 1
              fi
              ;;
            "tailscale-info")
              echo "🔗 Tailscale 네트워크 정보:"
              echo "  Tailscale IP: $TAILSCALE_IP"
              echo "  API Server: https://$TAILSCALE_IP:6443"
              echo ""
              tailscale status
              ;;
            "help"|*)
              echo "Kubernetes Tailscale 클러스터 관리 도구"
              echo ""
              echo "사용법: $0 <command>"
              echo ""
              echo "Commands:"
              echo "  init           - Kubernetes 클러스터 초기화"
              echo "  status         - 클러스터 상태 확인"
              echo "  join-cmd       - Worker 노드 조인 명령어 생성"
              echo "  export-config  - 외부 접근용 kubeconfig 생성"
              echo "  tailscale-info - Tailscale 네트워크 정보"
              echo "  help           - 도움말 표시"
              ;;
          esac
        dest: /usr/local/bin/k8s-tailscale
        mode: '0755'
        owner: root
        group: root
      when: tailscale_ip is defined and tailscale_ip.stdout != ""
      
    - name: Create Tailscale-aware monitoring script for K8s
      copy:
        content: |
          #!/usr/bin/env bash
          # K8s + Tailscale 모니터링 스크립트
          
          LOG_FILE="/var/log/k8s-tailscale-monitor.log"
          
          log_message() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
          }
          
          check_tailscale() {
              if tailscale status --json | jq -e '.BackendState == "Running"' > /dev/null 2>&1; then
                  return 0
              else
                  return 1
              fi
          }
          
          check_k8s_apiserver() {
              if kubectl cluster-info > /dev/null 2>&1; then
                  return 0
              else
                  return 1
              fi
          }
          
          check_k8s_nodes() {
              local ready_nodes
              ready_nodes=$(kubectl get nodes --no-headers 2>/dev/null | grep -c "Ready" || echo "0")
              if [ "$ready_nodes" -gt 0 ]; then
                  return 0
              else
                  return 1
              fi
          }
          
          # Tailscale 연결 확인
          if ! check_tailscale; then
              log_message "WARNING: Tailscale is not running"
              systemctl restart tailscaled
              sleep 10
          fi
          
          # K8s API 서버 확인
          if ! check_k8s_apiserver; then
              log_message "WARNING: Kubernetes API server is not accessible"
          fi
          
          # K8s 노드 상태 확인
          if ! check_k8s_nodes; then
              log_message "WARNING: No Kubernetes nodes are ready"
          fi
          
          # 성공적인 체크
          if check_tailscale && check_k8s_apiserver && check_k8s_nodes; then
              log_message "INFO: All systems operational"
          fi
        dest: /usr/local/bin/k8s-tailscale-monitor
        mode: '0755'
        owner: root
        group: root
        
    - name: Create systemd service for K8s + Tailscale monitoring
      copy:
        content: |
          [Unit]
          Description=Monitor K8s and Tailscale Connection
          After=tailscaled.service kubelet.service
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/k8s-tailscale-monitor
          User=root
        dest: /etc/systemd/system/k8s-tailscale-monitor.service
        
    - name: Create systemd timer for K8s + Tailscale monitoring
      copy:
        content: |
          [Unit]
          Description=Run K8s Tailscale Monitor every 5 minutes
          Requires=k8s-tailscale-monitor.service
          
          [Timer]
          OnCalendar=*:0/5
          Persistent=true
          
          [Install]
          WantedBy=timers.target
        dest: /etc/systemd/system/k8s-tailscale-monitor.timer
        
    - name: Enable and start K8s Tailscale monitoring timer
      systemd:
        daemon_reload: yes
        name: k8s-tailscale-monitor.timer
        enabled: yes
        state: started
        
    - name: Display final instructions
      debug:
        msg: |
          ✅ K8s Control Plane + Tailscale 설정 완료!
          
          다음 단계:
          1. Headscale 서버에서 라우트 승인:
             headscale routes list
             headscale routes enable -r <route-id>
          
          2. Kubernetes 클러스터 초기화:
             sudo k8s-tailscale init
          
          3. 외부에서 클러스터 접근:
             sudo k8s-tailscale export-config
          
          4. 모니터링:
             sudo k8s-tailscale status
             tail -f /var/log/k8s-tailscale-monitor.log